AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Serverless Gateway to S3

Parameters:

  DomainName:
    Description: |
      OPTIONAL - CNAME (alternate domain name), if any, for the distribution. Example. gateway.mydomain.com
      When using a CNAME, a certificate must already exist within ACM.
      If no custom CNAME is specified, leave this value empty or use 'gw.example.com'
    Type: String
    Default: gw.example.com

  DomainNameCertificateArn:
    Description: If you specify a custom domain name, you must also provide the ARN of the certificate
    Type: String
    Default: arn:aws:acm:us-east-1:000000000000:certificate/00000000-1111-2222-3333-444444444444

  AddressWhitelistEnabled:
    Description: Whether to enable or disable the WAF Whitelist
    Type: String
    Default: "false"
    AllowedValues: [ "true", "false" ]

  AddressWhitelist:
    Description: The CIDR ranges allowed to access the gateway. For example, 10.88.135.144/28
    Type: List<String>
    Default: 192.0.0.0/8

  AllowedMethods:
    Description: |
      Methods allowed by the Serverless Gateway.
      Values may include: HEAD, GET, OPTIONS, DELETE, POST, PUT, PATCH
    Type: List<String>
    Default: HEAD, GET, OPTIONS

  CachedMethods:
    Description: |
      Cached methods, must be 1.) HEAD, GET, or 2.) HEAD, GET, OPTIONS
    Type: List<String>
    Default: HEAD, GET, OPTIONS

  GeoRestrictionType:
    Description: Geo Restrictions can be used to whitelist or block access to specific countries.
    AllowedValues: [ none, blacklist, whitelist ]
    Default: none
    Type: String

  GeoRestrictionLocations:
    Description: |
      The Location element is a two-letter, uppercase country code for a country that you want to include in
      your blacklist or whitelist. Include one Location element for each country.
    Type: List<String>

  PriceClass:
    Description: |
      CloudFront edge locations are grouped into geographic regions, and they are grouped regions into price classes.
      PriceClass_All includes all regions. PriceClass_200 includes most regions (the United States; Canada; Europe;
      Hong Kong, Philippines, South Korea, Taiwan, and Singapore; Japan; India; South Africa; and Middle East regions)
      but excludes the most expensive regions. PriceClass_100 includes only the least expensive regions
      (the United States, Canada, and Europe regions).
    Type: String
    AllowedValues: [ PriceClass_100, PriceClass_200, PriceClass_All ]
    Default: PriceClass_All

  S3:
    Description: |
      The name of an existing S3 bucket. This example uses a fixed S3 bucket for content.
      If you prefer, you can dynamically determine the bucket at the time of request based on data in the request or requestor.
    Type: String

Conditions:

  UseCustomDomainName: !Not [ !Or [ !Equals [ !Ref DomainName, "" ], !Equals [ !Ref DomainName, "gw.example.com" ] ] ]

  UseAddressWhitelist: !Equals [ !Ref AddressWhitelistEnabled, "true" ]

  UseGeoRestrictions: !Not [ !Equals [ !Ref GeoRestrictionType, "none" ] ]

Resources:

  # --------------------------------------------------------------------------------------------------------------------
  # CloudFront
  # --------------------------------------------------------------------------------------------------------------------

  GatewayDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases: !If [ UseCustomDomainName, [ !Ref DomainName ], !Ref AWS::NoValue ]
        DefaultCacheBehavior:
          AllowedMethods: !Ref AllowedMethods
          CachedMethods: !Ref CachedMethods
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          Compress: true
          LambdaFunctionAssociations:
            - EventType: viewer-request
              IncludeBody: false
              LambdaFunctionARN: !Ref GatewayFunction.Version
          OriginRequestPolicyId: !Ref S3OriginRequestPolicy
          SmoothStreaming: false
          TargetOriginId: s3-origin
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - DomainName: !Sub ${S3}.s3.amazonaws.com
            Id: s3-origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${GatewayAccessIdentity}
        PriceClass: !Ref PriceClass
        Restrictions:
          GeoRestriction:
            Locations: !If [ UseGeoRestrictions, !Ref GeoRestrictionLocations, !Ref AWS::NoValue ]
            RestrictionType: !Ref GeoRestrictionType
        ViewerCertificate:
          AcmCertificateArn: !If [ UseCustomDomainName, !Ref DomainNameCertificateArn, !Ref AWS::NoValue ]
          CloudFrontDefaultCertificate: !If [ UseCustomDomainName, !Ref AWS::NoValue, true ]
          MinimumProtocolVersion: TLSv1.2_2019
          SslSupportMethod: !If [ UseCustomDomainName, sni-only, !Ref AWS::NoValue ]
        WebACLId: !If [ UseAddressWhitelist, !GetAtt WAF.Arn, !Ref AWS::NoValue ]

  S3AccessPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt GatewayAccessIdentity.S3CanonicalUserId
            Action: s3:*
            Resource: !Sub arn:aws:s3:::${S3}/*

  S3OriginRequestPolicy:
    Type: AWS::CloudFront::OriginRequestPolicy
    Properties:
      OriginRequestPolicyConfig:
        Comment: s3-origin-request-policy
        Name: s3-origin-request-policy
        HeadersConfig:
          HeaderBehavior: whitelist
          Headers: [ Origin, Access-Control-Request-Method, Access-Control-Request-Headers ]
        QueryStringsConfig:
          QueryStringBehavior: all
        CookiesConfig:
          CookieBehavior: none


  GatewayAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Gateway Access Identity

  # --------------------------------------------------------------------------------------------------------------------
  # Web Application Firewall, enabled if an address whitelist is used
  # --------------------------------------------------------------------------------------------------------------------

  WAF:
    Type: AWS::WAFv2::WebACL
    Condition: UseAddressWhitelist
    Properties:
      Name: gateway-webacl
      Scope: CLOUDFRONT
      Description: Gateway Web Application Firewall ACL
      DefaultAction:
        Block: { }
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: gateway-webacl-metric
      Rules:
        - Name: gateway-ip-range-rule
          Priority: 0
          Action:
            Allow: { }
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: gateway-ip-range-rule-metric
          Statement:
            IPSetReferenceStatement:
              Arn: !GetAtt WAFAddressRanges.Arn
              # IPSetForwardedIPConfig:

  WAFAddressRanges:
    Type: AWS::WAFv2::IPSet
    Condition: UseAddressWhitelist
    Properties:
      Description: IP addresses allowed access to the serverless gateway
      Name: gateway-ip-set
      Scope: CLOUDFRONT
      IPAddressVersion: IPV4
      Addresses: !Ref AddressWhitelist

  # --------------------------------------------------------------------------------------------------------------------
  # AWS Lambda@Edge functions
  # --------------------------------------------------------------------------------------------------------------------

  GatewayFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: production
      CodeUri: ./src
      Handler: serverless-gateway.handler
      MemorySize: 128
      Role: !GetAtt GatewayFunctionFunctionRole.Arn
      Runtime: python3.8
      Timeout: 5

  GatewayFunctionFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: edgelambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: gateway-function-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: s3:*
                Resource: [ "*" ]
              - Effect: Allow
                Action: [ logs:CreateLogGroup, logs:CreateLogStream, logs:PutLogEvents ]
                Resource: [ "*" ]

Outputs:

  GatewayDomainName:
    Description: Endpoint for Cloudfront Distribution
    Value: !GetAtt GatewayDistribution.DomainName
